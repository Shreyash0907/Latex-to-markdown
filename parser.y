/**
 * @file parser.y
 * @brief Bison file for parsing Latex code.
 * 
 * This file contains the grammer rules and semantics for creating the AST.
 */

%debug
%{
    #include <string>
    #include<vector>
    #include "Node.hpp"
    extern int yylineno;
    Node* root;

    int cnt = 0;
    int tcol = 0;
    int trow = 0;
    std::vector<std::string> tstr;
%}


%code requires {
    #include <cstdio>
    #include <string>
    #include <vector>
    #include "Node.hpp"
    using namespace std;
    extern int yylex(void);
    static void yyerror(const char* s); 
    Node* getRoot();
}
%expect 4

/// Union to define the data types of the tokens.
%union {
     std::string* str;
     Node* node;
}

/**
 * @brief type defines the non-terminals in the grammer
 * 
 */
%type <node> operations
%type <node> unoitem gsentence gsentences optspace
%type <node> oitem gdata sentence sentences ospace ospaces 
%type <node> tcontent tstructure tline tlines lsentences symbols list
%type <node> codecontent start program blocks operationList ostatement table thead url

/**
 * @brief token defines the tokens generated by lexer
 * 
 */
%token OTHER
%token LCURB RCURB APER TAB BSLASH PIPE NEWLINE LSQRB RSQRB
%token <str> TEXT SPACE
%token ITALIC BOLD HREF GRAPHIC DMOPEN DMEND IMATH SOUT
%token HRULE SECTION PARAGRAPH ITEM SUBSECTION SUBSUBSECTION HLINE
%token BCBLOCK ECBLOCK
%token BOLIST EOLIST BUNOLIST EUNOLIST
%token BTABLE ETABLE
%token BDOC EDOC

/**
 * @brief Start symbol of the grammar.
 */
%start start

%%

/**
 * @brief It parses the include libraries and other code before encountering the start of the required code.
 */
    start : startingtext start                          {};
            | BDOC NEWLINE program EDOC                 {
                                                            root = new Node(Start);
                                                            root->setValue(new std::string(""));
                                                            root->productions.push_back($3);
                                                            
                                                        };
             ;

/**
 * @brief Parses simple operations and block operations
 */         
    program :                                           {
                                                            $$ = new Node(Empty);
                                                            $$->setValue(new std::string(""));
                                                        } 
            | operationList program                     {
                                                            $$ = new Node(Program);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);
                                                            $$->productions.push_back($2);

                                                        }
            | blocks program                            {
                                                            $$ = new Node(Program);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);
                                                            $$->productions.push_back($2);

                                                        }
            ;

/**
 * @brief parses the blocks operations in code
 * 
 */
    blocks : list                                       {
                                                            $$ = new Node(Blocks);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);

                                                        }
            | BTABLE table ETABLE                       {
                                                            $$ = new Node(Blocks);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($2);
                                                            
                                                            tstr.clear();
                                                            tcol = 0;
                                                            trow = 0;
                                                        }
            | BCBLOCK codecontent ECBLOCK               {
                                                            $$ = new Node(Blocks);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Code);
                                                            temp->setValue(new std::string(""));

                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);
                                                        }
            | DMOPEN sentences DMEND                    {
                                                            $$ = new Node(Blocks);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Dmath);
                                                            temp->setValue(new std::string(""));                                              
                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);
                                                        }
            ;

/**
 * @brief parses the Table component in the code
 * 
 */
    table : thead NEWLINE tcontent                      {
                                                            $$ = new Node(Table);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($3);
                                                            
                                                           
                                                        }
/**
 * @brief parses heading component of the Table
 * 
 */
    thead: LCURB tstructure RCURB                       {
                                                            $$ = new Node(Thead);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($2);
                                                            
                                                           
                                                        }
/**
 * @brief parses the list component
 * 
 */
    list :  BUNOLIST depthI unoitem EUNOLIST depthD NEWLINE {
                                                            $$ = new Node(List);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($3);

                                                            
                                                        }
           | BOLIST depthI oitem EOLIST depthD NEWLINE  {
                                                            $$ = new Node(List);
                                                            $$->setValue(new std::string(""));                                              
                                                            $$->productions.push_back($3);
                                                            
                                                        }
            ;
/// Increases the depth of list in case of nested lists
    depthD : {cnt--;}
/// Decreases the depth of list in case of nested lists
    depthI : {cnt++;}

/**
 * @brief Parses the simple operations
 * 
 */
    operationList: operations                           {
                                                            $$ = new Node(Operationlist);
                                                            $$->setValue(new std::string("operations"));
                                                            $$->productions.push_back($1);
                                                            
                                                            
                                                        }
            ;
/**
 * @brief Parses various operations
 * 
 */
    operations: sentences                               {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);

                                                            
                                                        }
              | ITALIC ostatement                       {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Italic);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
              | BOLD ostatement                         {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Bold);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
              | SECTION ostatement                      {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Section);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);

                                                           
                                                        }
              | SUBSECTION ostatement                   {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Subsection);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
              | SUBSUBSECTION ostatement                {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Subsubsection);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
              | HREF url ostatement                     {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Href);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($2);
                                                            temp->productions.push_back($3);

                                                            $$->productions.push_back(temp);

                                                        }
              | HRULE                                   {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Hrule);
                                                           temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                        }
              | GRAPHIC gdata ostatement                {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Graphic);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($3);

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
              | PARAGRAPH                               {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Paragraph);
                                                           temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                        }
              | SOUT ostatement                         {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Sout);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);
                                                        }
              | IMATH sentences IMATH                  {
                                                            $$ = new Node(Operations);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Imath);
                                                           temp->setValue(new std::string(""));
                                                            temp->productions.push_back($2);

                                                            $$->productions.push_back(temp);
                                                        }
              ;

/**
 * @brief parses the url in href component
 * 
 */
    url : LCURB sentences RCURB                         {
                                                            $$ = new Node(Url);
                                                            $$->setValue(new std::string(""));

                                                            $$->productions.push_back($2);

                                                            
                                                        }
/**
 * @brief parses the nested simple operations
 * 
 */
    ostatement : LCURB program RCURB                 {
                                                            $$ = new Node(Ostatement);
                                                            $$->setValue(new std::string(""));

                                                            $$->productions.push_back($2);

                                                        } 
/**
 * @brief parses List items of unordered list
 * 
 */
    unoitem :                                           {
                                                            $$ = new Node(Empty);
                                                            $$->setValue(new std::string(""));
                                                        };
            | ospaces ITEM lsentences unoitem           {
                                                            $$ = new Node(Unoitem);
                                                            $$->depth = cnt;
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($3);
                                                            $$->productions.push_back($4);

                                                            
                                                        };
            | list unoitem                              {   
                                                            $$ = new Node(Unoitem);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);
                                                            $$->productions.push_back($2);
                                                        
                                                        }
            ;
/**
 * @brief parses List items of ordered list
 * 
 */
    oitem :                                             {
                                                            $$ = new Node(Empty);
                                                            $$->setValue(new std::string(""));
                                                        };
            | ospaces ITEM lsentences oitem             {
                                                            $$ = new Node(Oitem);
                                                            $$->depth = cnt;
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($3);
                                                            $$->productions.push_back($4);

                                                          
                                                        };
            | list oitem                                {
                                                            $$ = new Node(Oitem);
                                                            $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);
                                                            $$->productions.push_back($2);
                                                    
                                                        }
            ;
/**
 * @brief parses table structure
 * 
 */
    tstructure :                                        {
                                                            $$ = new Node(Empty);
                                                            $$->setValue(new std::string(""));
                                                        }
                | PIPE tstructure                       {
                                                            $$ = new Node(Tstructure);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Pipe);
                                                            temp->setValue( new std::string("|"));

                                                            $$->productions.push_back(temp);
                                                            $$->productions.push_back($2);

                                                            
                                                        };
               | TEXT tstructure                        {
                                                            $$ = new Node(Tstructure);
                                                            $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Text);
                                                            temp->setValue( new std::string(*$1));
                                                            std::string st = *(temp->getValue());
                                                            tstr.push_back(st);

                                                            $$->productions.push_back(temp);
                                                            $$->productions.push_back($2);  

                                                            
                                                        };
                ;
/**
 * @brief parses data content of the table
 * 
 */               
    tcontent :                                          {
                                                            $$ = new Node(Empty);
                                                           $$->setValue(new std::string(""));
                                                        }
             | tcontent tlines BSLASH BSLASH ospaces     {

                                                            trow++;
                                                            $$ = new Node(Tcontent);
                                                            $$->setValue(new std::string(""));
                                                            $$->rownum = trow;
                                                            $$->tstruct = tstr;

                                                            $$->productions.push_back($1);
                                                            $$->productions.push_back($2);

                                                        }
             | tcontent HLINE ospaces                   {
                                                            $$ = new Node(Tcontent);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);

                                                            Node* temp = new Node(Hline);
                                                            $$->productions.push_back(temp);
                                                        }
            ;

/**
 * @brief parses multiple table rows
 * 
 */
    tlines : tline                                      {
                                                            $$ = new Node(Tlines);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);
                                                            
                                                        };
           | tline tlines                               {
                                                            $$ = new Node(Tlines);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);
                                                            $$->productions.push_back($2);

                                                            
                                                        };
        ;
/**
 * @brief parses individual table rows
 * 
 */
    tline : TEXT ospaces                                {
                                                            $$ = new Node(Tline);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Text);
                                                            temp->setValue( new std::string(*$1));

                                                            $$->productions.push_back(temp);
                                                            $$->productions.push_back($2);

                                                             
                                                        };
          | APER ospaces                                {
                                                            $$ = new Node(Tline);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Aper);
                                                            temp->setValue(new std::string("&"));

                                                            $$->productions.push_back(temp);
                                                            $$->productions.push_back($2);

                                                              
                                                        };
          ;
/**
 * @brief parses graphics data
 * 
 */
    gdata :                                             {}
            | LSQRB gsentences RSQRB                    {
                                                            $$ = new Node(Gdata);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($2);

                                                                
                                                        };
/**
 * @brief parses code present inside the verbatim block
 * 
 */
    codecontent :                                       {
                                                            $$ = new Node(Empty);
                                                            $$->setValue(new std::string(""));
                                                        }
                | sentences codecontent                 {
                                                            $$ = new Node(Codecontent);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);    
                                                            $$->productions.push_back($2);

                                                            
                                                              
                                                        };
                | symbols codecontent                   {
                                                            $$ = new Node(Codecontent);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);    
                                                            $$->productions.push_back($2);

                                                            
                                                            
                                                        }
/**
 * @brief parses different type of symbols in verbatim blocks
 * 
 */
    symbols : LCURB                                     {
                                                            $$ = new Node(Symbols);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Lcurb);
                                                            temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
            | RCURB                                     {
                                                            
                                                            $$ = new Node(Symbols);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Rcurb);
                                                            temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
            | LSQRB                                     {
                
                                                            $$ = new Node(Symbols);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Lsqrb);
                                                            temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
            | RSQRB                                     {
                                                            $$ = new Node(Symbols);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Rsqrb);
                                                            temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
            | APER                                      {
                                                            $$ = new Node(Symbols);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Aper);
                                                            temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
            | PIPE                                      {
                                                            $$ = new Node(Symbols);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Pipe);
                                                            temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
            | BSLASH                                    {
                                                            $$ = new Node(Symbols);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Bslash);
                                                            temp->setValue(new std::string(""));

                                                            $$->productions.push_back(temp);

                                                            
/**
 * @brief parses included libraries
 * 
 */                                                        }
    startingtext : TEXT                                 {}
                    | symbols                           {}
                    | NEWLINE                           {}

/**
 * @brief parses multiple lines of text
 * 
 */
    sentences : sentence                                {
                                                            $$ = new Node(Sentences);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);

                                                            
                                                        };
                | sentence sentences                    {
                                                            $$ = new Node(Sentences);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);
                                                            $$->productions.push_back($2);

                                                            
                                                        };
                ;
/**
 * @brief parses optional spaces
 * 
 */
    ospace : SPACE                                      {
                                                            $$ = new Node(Ospace);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Space);
                                                           temp->setValue(new std::string(*$1));

                                                            $$->productions.push_back(temp);

                                                            
                                                        };
            | NEWLINE                                   {
                                                            $$ = new Node(Ospace);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Newline);
                                                            temp->setValue(new std::string("\n"));

                                                            $$->productions.push_back(temp);
                                                            
                                                        };
            ;
/**
 * @brief parses multiple optional spaces
 * 
 */
    ospaces :                                           {
                                                            $$ = new Node(Empty);
                                                            $$->setValue(new std::string(""));
                                                        };
            | ospaces ospace                            {
                                                            $$ = new Node(Ospaces);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($2);
                                                            $$->productions.push_back($1);

                                                            
                                                        };
            ;
/**
 * @brief parses multiple graphics modifying data
 * 
 */
    gsentences:                                         {}
                | gsentences gsentence                  {
                                                            $$ = new Node(Gsentences);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($2);
                                                            $$->productions.push_back($1);

                                                                
                                                        };
                ;
/**
 * @brief parses grpahics modifying data
 * 
 */   
    gsentence : BSLASH                                  {}
                | sentence                              {
                                                            $$ = new Node(Gsentence);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);

                                                            
                                                        }
/**
 * @brief parses text and optional spaces
 * 
 */
    sentence : TEXT                                     {
                                                            $$ = new Node(Sentence);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Text);
                                                            temp->setValue(new std::string(*$1));

                                                            $$->productions.push_back(temp);

                                                            
                                                        }
             | ospace                                   {
                                                            $$ = new Node(Sentence);
                                                           $$->setValue(new std::string(""));
                                                            $$->productions.push_back($1);

                                                            
                                                        }
             ;

/**
 * @brief parses List items texts
 * 
 */
    lsentences : NEWLINE optspace                       {
                                                            $$ = new Node(Lsentences);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Newline);
                                                            temp->setValue(new std::string("\n"));

                                                            $$->productions.push_back(temp);
                                                            $$->productions.push_back($2);

                                                            
                                                        }
                | SPACE lsentences                      {
                                                            $$ = new Node(Lsentences);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Space);
                                                            temp->setValue(new std::string(*$1));
                                                            $$->productions.push_back(temp);
                                                            $$->productions.push_back($2);

                                                            
                                                        }
                | TEXT lsentences                       {
                                                            $$ = new Node(Lsentences);
                                                           $$->setValue(new std::string(""));

                                                            Node* temp = new Node(Text);
                                                            temp->setValue(new std::string(*$1));

                                                            $$->productions.push_back(temp);
                                                            $$->productions.push_back($2);

                                                        }
                ;

/**
 * @brief parses optional spaces for some specific cases
 * 
 */    
    optspace :                                          {
                                                            $$ = new Node(Empty);
                                                            $$->setValue(new std::string(""));
                                                        }              
               | SPACE                                  {
                                                            $$ = new Node(Empty);
                                                            $$->setValue(new std::string(""));
                                                        }

%%

/**
 * @brief Get the Root object of the AST.
 * 
 * @return Node* 
 */
Node* getRoot(){
        return root; 
}

/**
 * @brief Function is used to specify the error while parsing.
 * 
 * @param s Denotes the type of error.
 */
void yyerror(const char *s){
    extern char *yytext;
    fprintf(stderr, "Error: %s at line token '%s'\n", s, yytext);
}
